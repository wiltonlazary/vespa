# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

namespace=document.config

## Whether attempts to set an undefined field should be ignored rather than causing an error
ignoreundefinedfields bool default=false

## Prefer "Vespa 8" format for the "position" type
usev8geopositions bool default=false

## The Id of the documenttype. Must be unique among all document types.
documenttype[].id int

## Specify the name of the document type. Must be unique.
documenttype[].name string

## Version is not used
documenttype[].version int default=0

## Name of header struct defining document header.
documenttype[].headerstruct int

## Specify a document field id. Must be unique within the document type.
documenttype[].bodystruct int default=0

## Specify a document type to inherit (id)
documenttype[].inherits[].id int

## This is the id of a datatype defined in the document.
documenttype[].datatype[].id int

## This is the type of the datatype.
documenttype[].datatype[].type enum {STRUCT, ARRAY, WSET, MAP, ANNOTATIONREF, PRIMITIVE, TENSOR}

## This is the id of the datatype of the element in the array.
documenttype[].datatype[].array.element.id int default=0

## This is the id of the datatype of the key in the map.
documenttype[].datatype[].map.key.id int default=0

## This is the id of the datatype of the value in the map.
documenttype[].datatype[].map.value.id int default=0

## This is the id of the datatype of the key in the wset.
documenttype[].datatype[].wset.key.id int default=0

## Should an update to a nonexistent element cause it to be created
documenttype[].datatype[].wset.createifnonexistent bool default=false

## Should an element in a weighted set be removed if an update changes the weight to 0
documenttype[].datatype[].wset.removeifzero bool default=false

## This is the id of the referenced annotation.
documenttype[].datatype[].annotationref.annotation.id int default=0

## Specify the name of the struct type. Must be unique within documenttype.
documenttype[].datatype[].sstruct.name string default=""

## Version is not used
documenttype[].datatype[].sstruct.version int default=0

## Specify which compression to use if compression is enabled above (0 = NONE, 6 = LZ4)
documenttype[].datatype[].sstruct.compression.type enum {NONE, LZ4} default=NONE

## Specify the compression level to use if compression is enabled
documenttype[].datatype[].sstruct.compression.level int default=0

## Specify the minimum reduction required from compression in order to keep the compressed version (maximum percentage of original size)
documenttype[].datatype[].sstruct.compression.threshold int default=95

## Specify the minimum size before trying compression.
documenttype[].datatype[].sstruct.compression.minsize int default=200

## Specify a struct field name. Must be unique within the struct type.
documenttype[].datatype[].sstruct.field[].name string

## Specify a document field id. If not specified, this is generated by a hash function
documenttype[].datatype[].sstruct.field[].id int

## Specify the datatype of the field. Can only be a type defined in document
## or one of its inherited document types.
documenttype[].datatype[].sstruct.field[].datatype int

## Additional, optional type information which can be changed without
## (necessarily) causing field incompatibility
documenttype[].datatype[].sstruct.field[].detailedtype string default=""

## The id of the annotation type.
documenttype[].annotationtype[].id int

## The name of the annotation type.
documenttype[].annotationtype[].name string

## The contained datatype of the annotation type.
documenttype[].annotationtype[].datatype int default=-1

## The annotation type that this type inherits. (0 or 1 type)
documenttype[].annotationtype[].inherits[].id int

## Field sets
documenttype[].fieldsets{}.fields[] string

## ID of reference type. This is a regular data type, but is kept in its own
## array to avoid polluting the existing datatype array with a new default
## field value.
documenttype[].referencetype[].id int

## Numeric ID of the document type instances of the reference point to.
documenttype[].referencetype[].target_type_id int

## Imported fields (specified outside the document block in the schema)
documenttype[].importedfield[].name string


# Here starts a new model for how datatypes are configured, where
# everything is per document-type, and each documenttype contains the
# datatypes it defines.

# Note: we will include the built-in "document" document
# type that all other doctypes inherit from also, in order
# to get all the primitive and built-in types declared
# with an idx we can refer to.

# Note: indexes are only meaningful as internal references in this
# config; they will typically be sequential (1,2,3,...)  in the order
# that they are generated (but nothing should depend on that).


## Name of the document type. Must be unique.
doctype[].name string

## Index of this type (as a datatype which can be referred to).
doctype[].idx int

## Internal ID of this datatype
doctype[].internalid int

## Specify document types to inherit
doctype[].inherits[].idx int

## Index of struct defining document fields
doctype[].contentstruct int

## Field sets available for this document type
doctype[].fieldsets{}.fields[] string

## Imported fields (specified outside the document block in the schema)
doctype[].importedfield[].name string

# Everything below here is configuration of data types defined by
# this document type.

# Primitive types must be present as built-in static members.

## Index of primitive type
doctype[].primitivetype[].idx int

## The name of this primitive type
doctype[].primitivetype[].name string


# Arrays are the simplest collection type:

## Index of this array type
doctype[].arraytype[].idx int

## Index of the element type this array type contains
doctype[].arraytype[].elementtype int

## Internal ID of this datatype
doctype[].arraytype[].internalid int


# Maps are another collection type:

## Index of this map type
doctype[].maptype[].idx int

## Index of the key type used by this map type
doctype[].maptype[].keytype int

## Index of the key type used by this map type
doctype[].maptype[].valuetype int

## Internal ID of this datatype
doctype[].maptype[].internalid int


# Weighted sets are more complicated;
# they can be considered as an collection
# of unique elements where each element has
# an associated weight:

## Index of this weighted set type
doctype[].wsettype[].idx int

## Index of the element types contained in this weighted set type
doctype[].wsettype[].elementtype int

## Should an update to a nonexistent element cause it to be created
doctype[].wsettype[].createifnonexistent bool default=false

## Should an element in a weighted set be removed if an update changes the weight to 0
doctype[].wsettype[].removeifzero bool default=false

## Internal ID of this datatype
doctype[].wsettype[].internalid int


# Tensors have their own type system

## Index of this tensor type
doctype[].tensortype[].idx int

## Description of the type of the actual tensors contained
doctype[].tensortype[].detailedtype string


# Document references refer to parent documents that a document can
# import fields from:

## Index of this reference data type:
doctype[].documentref[].idx int

## Index of the document type this reference type refers to:
doctype[].documentref[].targettype int

## Internal ID of this datatype
doctype[].documentref[].internalid int


# Annotation types are another world, but are modeled here
# as if they were also datatypes contained inside document types:

## Index of an annotation type.
doctype[].annotationtype[].idx int

## Name of the annotation type.
doctype[].annotationtype[].name string

## Internal id of this annotation type
doctype[].annotationtype[].internalid int

## Index of contained datatype of the annotation type, if any
doctype[].annotationtype[].datatype int default=-1

## Index of annotation type that this type inherits.
doctype[].annotationtype[].inherits[].idx int


# Annotation references are field values referring to
# an annotation of a certain annotation type.

## Index of this annotation reference type
doctype[].annotationref[].idx int

## Index of the annotation type this annotation reference type refers to
doctype[].annotationref[].annotationtype int

## Internal ID of this datatype
doctype[].annotationref[].internalid int


# A struct is just a named collections of fields:

## Index of this struct type
doctype[].structtype[].idx int

## Name of the struct type. Must be unique within documenttype.
doctype[].structtype[].name string

## Index of another struct type to inherit
doctype[].structtype[].inherits[].type int

## Name of a struct field. Must be unique within the struct type.
doctype[].structtype[].field[].name string

## The "field id" - used in serialized format!
doctype[].structtype[].field[].internalid int

## Index of the type of this field
doctype[].structtype[].field[].type int

## Internal ID of this datatype
doctype[].structtype[].internalid int
