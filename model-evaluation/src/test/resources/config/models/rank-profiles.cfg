rankprofile[0].name "mnist_softmax"
rankprofile[0].fef.property[0].name "rankingExpression(default.add).rankingScript"
rankprofile[0].fef.property[0].value "join(reduce(join(rename(Placeholder, (d0, d1), (d0, d2)), constant(mnist_softmax_Variable), f(a,b)(a * b)), sum, d2), constant(mnist_softmax_Variable_1), f(a,b)(a + b))"
rankprofile[0].fef.property[1].name "rankingExpression(default.add).Placeholder.type"
rankprofile[0].fef.property[1].value "tensor(d0[],d1[784])"
rankprofile[0].fef.property[2].name "rankingExpression(default.add).type"
rankprofile[0].fef.property[2].value "tensor(d1[10])"
rankprofile[1].name "xgboost_2_2"
rankprofile[1].fef.property[0].name "rankingExpression(xgboost_2_2).rankingScript"
rankprofile[1].fef.property[0].value "if (f29 < -0.1234567, if (f56 < -0.242398, 1.71218, -1.70044), if (f109 < 0.8723473, -1.94071, 1.85965)) + if (f60 < -0.482947, if (f29 < -4.2387498, 0.784718, -0.96853), -6.23624)"
rankprofile[2].name "mnist_softmax_saved"
rankprofile[2].fef.property[0].name "rankingExpression(serving_default.y).rankingScript"
rankprofile[2].fef.property[0].value "join(reduce(join(rename(Placeholder, (d0, d1), (d0, d2)), constant(mnist_softmax_saved_layer_Variable_read), f(a,b)(a * b)), sum, d2), constant(mnist_softmax_saved_layer_Variable_1_read), f(a,b)(a + b))"
rankprofile[2].fef.property[1].name "rankingExpression(serving_default.y).Placeholder.type"
rankprofile[2].fef.property[1].value "tensor(d0[],d1[784])"
rankprofile[2].fef.property[2].name "rankingExpression(serving_default.y).type"
rankprofile[2].fef.property[2].value "tensor(d1[10])"
rankprofile[3].name "mnist_saved"
rankprofile[3].fef.property[0].name "rankingExpression(imported_ml_function_mnist_saved_dnn_hidden1_add).rankingScript"
rankprofile[3].fef.property[0].value "join(reduce(join(rename(input, (d0, d1), (d0, d4)), constant(mnist_saved_dnn_hidden1_weights_read), f(a,b)(a * b)), sum, d4), constant(mnist_saved_dnn_hidden1_bias_read), f(a,b)(a + b))"
rankprofile[3].fef.property[1].name "rankingExpression(imported_ml_function_mnist_saved_dnn_hidden1_add).type"
rankprofile[3].fef.property[1].value "tensor(d3[300])"
rankprofile[3].fef.property[2].name "rankingExpression(serving_default.y).rankingScript"
rankprofile[3].fef.property[2].value "join(reduce(join(map(join(reduce(join(join(join(rankingExpression(imported_ml_function_mnist_saved_dnn_hidden1_add), 0.009999999776482582, f(a,b)(a * b)), rankingExpression(imported_ml_function_mnist_saved_dnn_hidden1_add), f(a,b)(max(a,b))), constant(mnist_saved_dnn_hidden2_weights_read), f(a,b)(a * b)), sum, d3), constant(mnist_saved_dnn_hidden2_bias_read), f(a,b)(a + b)), f(a)(1.050701 * if (a >= 0, a, 1.673263 * (exp(a) - 1)))), constant(mnist_saved_dnn_outputs_weights_read), f(a,b)(a * b)), sum, d2), constant(mnist_saved_dnn_outputs_bias_read), f(a,b)(a + b))"
rankprofile[3].fef.property[3].name "rankingExpression(serving_default.y).input.type"
rankprofile[3].fef.property[3].value "tensor(d0[],d1[784])"
rankprofile[3].fef.property[4].name "rankingExpression(serving_default.y).type"
rankprofile[3].fef.property[4].value "tensor(d1[10])"
rankprofile[4].name "lightgbm_regression"
rankprofile[4].fef.property[0].name "rankingExpression(lightgbm_regression).rankingScript"
rankprofile[4].fef.property[0].value "if (!(numerical_2 >= 0.46643291586559305), 2.1594397038037663, if (categorical_2 in ["k", "l", "m"], 2.235297305276056, 2.1792953471546546)) + if (categorical_1 in ["d", "e"], 0.03070842919354316, if (!(numerical_1 >= 0.5102250691730842), -0.04439151147520909, 0.005117411709368601)) + if (!(numerical_2 >= 0.668665477622446), if (!(numerical_2 >= 0.008118820676863816), -0.15361238490967524, -0.01192330846157292), 0.03499044894987518) + if (!(numerical_1 >= 0.5201391072644542), -0.02141000620783247, if (categorical_1 in ["a", "b"], -0.004121485787596721, 0.04534090904886873)) + if (categorical_2 in ["k", "l", "m"], if (!(numerical_2 >= 0.27283279016959255), -0.01924803254356527, 0.03643772842347651), -0.02701711918923075)"
rankprofile[5].name "vespa_model"
rankprofile[5].fef.property[0].name "rankingExpression(test_mapped).rankingScript"
rankprofile[5].fef.property[0].value "tensor(d0{}):{a:1, b:2}"
rankprofile[5].fef.property[1].name "rankingExpression(test_indexed).rankingScript"
rankprofile[5].fef.property[1].value "tensor(d0[2],d1[3]):[[1,2,3],[4,5,6]]"
rankprofile[5].fef.property[2].name "rankingExpression(test_mixed).rankingScript"
rankprofile[5].fef.property[2].value "tensor(x{},y[3]):{a:[1,2,3], b:[4,5,6]}"
rankprofile[5].fef.property[3].name "rankingExpression(test_mixed_2).rankingScript"
rankprofile[5].fef.property[3].value "tensor(a[2],b[2],c{},d[2]):{a:[[[1,2], [3,4]], [[5,6], [7,8]]], b:[[[1,2], [3,4]], [[5,6], [7,8]]] }"
rankprofile[6].name "xgboost_non_standalone"
rankprofile[6].fef.property[0].name "rankingExpression(xgboost_non_standalone).rankingScript"
rankprofile[6].fef.property[0].value "if (rankingExpression(someFunction) < 1, 2, 3)"
