// Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
syntax = "proto3";

option cc_enable_arenas = true;

package storage.mbusprot.protobuf;

import "common.proto";

message DeleteBucketRequest {
    Bucket     bucket               = 1;
    BucketInfo expected_bucket_info = 2;
}

message DeleteBucketResponse {
    BucketInfo bucket_info        = 1;
    BucketId   remapped_bucket_id = 2;
}

message CreateBucketRequest {
    Bucket bucket           = 1;
    bool   create_as_active = 2;
}

message CreateBucketResponse {
    BucketInfo bucket_info        = 1;
    BucketId   remapped_bucket_id = 2;
}

message MergeNode {
    uint32 index = 1;
    bool   source_only = 2;
}

message MergeBucketRequest {
    Bucket             bucket                = 1;
    uint32             cluster_state_version = 2;
    uint64             max_timestamp         = 3;
    repeated MergeNode nodes                 = 4;
    repeated uint32    node_chain            = 5;
    bool               unordered_forwarding  = 6;
}

message MergeBucketResponse {
    BucketId remapped_bucket_id = 1;
}

message MetaDiffEntry {
    uint64   timestamp     = 1;
    GlobalId gid           = 2;
    uint32   header_size   = 3;
    uint32   body_size     = 4;
    uint32   flags         = 5;
    uint32   presence_mask = 6;
}

message GetBucketDiffRequest {
    Bucket                 bucket        = 1;
    uint64                 max_timestamp = 2;
    repeated MergeNode     nodes         = 3;
    repeated MetaDiffEntry diff          = 4;
}

message GetBucketDiffResponse {
    BucketId remapped_bucket_id = 1;
    repeated MetaDiffEntry diff = 2;
}

message ApplyDiffEntry {
    MetaDiffEntry entry_meta = 1;
    bytes document_id = 2;
    bytes header_blob = 3;
    bytes body_blob = 4;
}

message ApplyBucketDiffRequest {
    Bucket             bucket = 1;
    repeated MergeNode nodes  = 2;
    uint32 max_buffer_size = 3;
    repeated ApplyDiffEntry entries = 4;
}

message ApplyBucketDiffResponse {
    BucketId remapped_bucket_id = 1;
    repeated ApplyDiffEntry entries = 4;
}

message ExplicitBucketSet {
    // `Bucket` is not needed, as the space is inferred from the owning message.
    repeated BucketId bucket_ids = 2;
}

message AllBuckets {
    uint32 distributor_index = 1;
    bytes cluster_state = 2;
    bytes distribution_hash = 3;
}

message RequestBucketInfoRequest {
    BucketSpace bucket_space = 1;
    oneof request_for {
        ExplicitBucketSet explicit_bucket_set = 2;
        AllBuckets        all_buckets         = 3;
    }
}

message BucketAndBucketInfo {
    fixed64 raw_bucket_id = 1;
    BucketInfo bucket_info = 2;
}

message SupportedNodeFeatures {
    bool unordered_merge_chaining               = 1;
    bool two_phase_remove_location              = 2;
    bool no_implicit_indexing_of_active_buckets = 3;
}

message RequestBucketInfoResponse {
    repeated BucketAndBucketInfo bucket_infos = 1;
    // Only present for full bucket info fetches (not for explicit buckets)
    SupportedNodeFeatures supported_node_features = 2;
}

message NotifyBucketChangeRequest {
    Bucket     bucket      = 1;
    BucketInfo bucket_info = 2;
}

message NotifyBucketChangeResponse {
    // Currently empty
}

message SplitBucketRequest {
    Bucket bucket         = 1;
    uint32 min_split_bits = 2;
    uint32 max_split_bits = 3;
    uint32 min_byte_size  = 4;
    uint32 min_doc_count  = 5;
}

message SplitBucketResponse {
    BucketId remapped_bucket_id = 1;
    repeated BucketAndBucketInfo split_info = 2;
}

message JoinBucketsRequest {
    Bucket bucket = 1;
    repeated BucketId source_buckets = 2;
    uint32 min_join_bits = 3;
}

message JoinBucketsResponse {
    BucketInfo bucket_info        = 1;
    BucketId   remapped_bucket_id = 2;
}

message SetBucketStateRequest {
    enum BucketState {
        Inactive = 0;
        Active = 1;
    }

    Bucket bucket = 1;
    BucketState state = 2;
}

message SetBucketStateResponse {
    BucketId remapped_bucket_id = 1;
}
